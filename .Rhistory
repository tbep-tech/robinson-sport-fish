?quarto::quarto_render
library(shiny)
library(timevis)
library(shiny)
# timevis() %>%
#   addItem(list(id = "date1", content = "Website Deployed", start = "2022-06-16"))
data <- data.frame(
id = 1:3,
start = c("2015-04-04", "2015-04-05 11:00:00", "2015-04-06 15:00:00"),
end = c("2015-04-08", NA, NA),
content = c("<h2>Vacation!!!</h2>", "Acupuncture", "Massage"),
style = c("color: red;", NA, NA)
)
ui <- fluidPage(
timevisOutput("appts"),
div("Selected items:", textOutput("selected", inline = TRUE)),
div("Visible window:", textOutput("window", inline = TRUE)),
tableOutput("table")
)
server <- function(input, output) {
output$appts <- renderTimevis(
timevis(
data,
options = list(editable = TRUE, multiselect = TRUE, align = "center")
)
)
observeEvent(input$appts_selected, {
showModal(modalDialog(
title = "Somewhat important message",
paste(input$appts_selected, "has been selected"),
easyClose = TRUE,
footer = NULL
))
})
}
shinyApp(ui, server)
library(timevis)
library(shiny)
timevis() %>%
addItem(list(id = "date1", content = "Website Deployed", start = "2022-06-16"))
library(timevis)
library(shiny)
timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first">Website Deployed</a>', start = "2022-06-16"))
library(timevis)
library(shiny)
timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
library(timevis)
timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
?timevis::timevis
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
.vis-timeline {
border-color: #269026;
background-color: lightgreen;
font-size: 15px;
color: green;
}
"
tv <- tagList(tags$style(style), tv)
library)timevis()
??tagList
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
.vis-timeline {
border-color: #269026;
background-color: lightgreen;
font-size: 15px;
color: green;
}
"
tv <- htmltools::tagList(tags$style(style), tv)
?htmltools::tagList
?tagList
tags$style
tagList(tv)
htmltools::tagList(tv)
htmltools::tagList(tv)$style
htmltools::tagList(tv)$style <- style
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
.vis-timeline {
border-color: #269026;
background-color: lightgreen;
font-size: 15px;
color: green;
}
"
tv <- htmltools::tagList(style(style), tv)
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
.vis-timeline {
border-color: #269026;
background-color: lightgreen;
font-size: 15px;
color: green;
}
"
tv <- htmltools::tagList(htmltools::tags$style(style), tv)
htmltools::html_print(tv)
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
.vis-timeline {
border-color: #269026;
background-color: lightgreen;
font-size: 15px;
color: green;
}
.vis-time-axis .vis-grid.vis-odd {
background: #f5f5f5;
}
"
tv <- htmltools::tagList(htmltools::tags$style(style), tv)
htmltools::html_print(tv)
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
.vis-timeline {
border-color: #269026;
background-color: lightgreen;
font-size: 15px;
color: green;
}
.vis-time-axis .vis-grid.vis-odd {
background: lightgreen;
}
"
tv <- htmltools::tagList(htmltools::tags$style(style), tv)
htmltools::html_print(tv)
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
.vis-timeline {
border-color: #269026;
background-color: lightgreen;
font-size: 15px;
color: green;
}
.vis-timeline .vis-grid.vis-odd {
background: lightgreen;
}
"
tv <- htmltools::tagList(htmltools::tags$style(style), tv)
htmltools::html_print(tv)
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
/* alternating column backgrounds */
.vis-time-axis .vis-grid.vis-odd {
background: #f5f5f5;
}
/* gray background in weekends, white text color */
.vis-time-axis .vis-grid.vis-saturday,
.vis-time-axis .vis-grid.vis-sunday {
background: gray;
}
.vis-time-axis .vis-text.vis-saturday,
.vis-time-axis .vis-text.vis-sunday {
color: white;
}
"
tv <- htmltools::tagList(htmltools::tags$style(style), tv)
htmltools::html_print(tv)
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
/* alternating column backgrounds */
.vis-time-axis .vis-grid.vis-even {
background: white;
}
"
tv <- htmltools::tagList(htmltools::tags$style(style), tv)
htmltools::html_print(tv)
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
/* alternating column backgrounds */
.vis-time-axis .vis-grid {
background: white;
}
"
tv <- htmltools::tagList(htmltools::tags$style(style), tv)
htmltools::html_print(tv)
#| echo: false
library(timevis)
tv <- timevis() %>%
addItem(list(id = "date1", content = '<a href ="updates/first.html">Website Deployed</a>', start = "2022-06-16"))
style <- "
/* alternating column backgrounds */
.vis-time-axis {
background: white;
}
"
tv <- htmltools::tagList(htmltools::tags$style(style), tv)
tv
#POTENTIAL locations of acoustic receivers
receiverdat <- read.csv("shapefiles/AcousticReceiver_loc_deployed.csv", header = T, stringsAsFactors = F)
#POTENTIAL locations of acoustic receivers
receiverdat <- read.csv("shapefiles/AcousticReceiver_loc_deployed.csv", header = T, stringsAsFactors = F)
#let's combine all point data to make a simple legend
pointdat <- read.csv("shapefiles/RobPres_pointstructures.csv", header = T, stringsAsFactors = F)
getwd()
#| echo: false
#| message: false
library(tidyverse)
library(sf)
library(mapview)
library(ggpubr)
library(png)
#### Prep spatial data layers ####
# read in Tampa Bay Shoreline shapefile
TBshore <- st_read('shapefiles/Tampa_Bay_Shoreline.shp', quiet = T) %>%
st_transform(4326)
#| echo: false
#| message: false
library(tidyverse)
library(sf)
library(mapview)
library(ggpubr)
library(png)
#### Prep spatial data layers ####
# read in Tampa Bay Shoreline shapefile
TBshore <- st_read('shapefiles/Tampa_Bay_Shoreline.shp', quiet = T) %>%
st_transform(4326)
list.dirs()
list.files()
list.files(path = "shapefiles/")
read.csv("shapefiles/AcousticReceiver_loc_deployed.csv", header = T, stringsAsFactors = F)
#| echo: false
#| message: false
library(tidyverse)
library(sf)
library(mapview)
library(ggpubr)
library(png)
#### Prep spatial data layers ####
# read in Tampa Bay Shoreline shapefile
TBshore <- st_read('shapefiles/Tampa_Bay_Shoreline.shp', quiet = T) %>%
st_transform(4326)
#| echo: false
#| message: false
library(tidyverse)
library(sf)
library(mapview)
library(ggpubr)
library(png)
#### Prep spatial data layers ####
# read in Tampa Bay Shoreline shapefile
TBshore <- st_read('shapefiles/Tampa_Bay_Shoreline.shp', quiet = T) %>%
st_transform(4326)
TBshore <- st_read('shapefiles/Tampa_Bay_Shoreline.shp', quiet = T)
TBshore <- st_read('shapefiles/Tampa_Bay_Shoreline.shp', quiet = T)
# read in Tampa Bay Shoreline shapefile
getwd()
# read in Tampa Bay Shoreline shapefile
setwd(..)
# read in Tampa Bay Shoreline shapefile
setwd("..")
#POTENTIAL locations of acoustic receivers
receiverdat <- read.csv("shapefiles/AcousticReceiver_loc_deployed.csv", header = T, stringsAsFactors = F)
setwd("..")
receiverdat <- read.csv("shapefiles/AcousticReceiver_loc_deployed.csv", header = T, stringsAsFactors = F)
library(readr)
AcousticReceiver_loc_deployed <- read_csv("Robinson Preserve/shapefiles/AcousticReceiver_loc_deployed.csv")
View(AcousticReceiver_loc_deployed)
View(AcousticReceiver_loc_deployed)
#| echo: false
#| message: false
library(tidyverse)
library(sf)
library(mapview)
library(ggpubr)
library(png)
#### Prep spatial data layers ####
# read in Tampa Bay Shoreline shapefile
setwd("..")
TBshore <- st_read('shapefiles/Tampa_Bay_Shoreline.shp', quiet = T) %>%
st_transform(4326)
# read in Robinson Preserve outline polygon from Manatee County
preservedat <- st_read('shapefiles/Parks_and_Preserves.shp', quiet = T) %>%
filter(NAME == 'Robinson Preserve') %>%
select(NAME, TOTADDRESS, ZIPCODE, PARK_TYPE, ACREAGE, MANAGEMENT, OWNER_NAME, geometry)
preservedat.shp <- preservedat %>%
st_transform(4326)
# the county shapefile is in WGS 84 and is a multipolygon
# read in Robinson Preserve expansion project outline polygon
expansiondat <- st_read('shapefiles/RobPres_Expansion_Poly.shp', quiet = T) %>%
select(Entity, Layer, DocName, DocType, geometry) %>%
#need to transform from NAD83 to WGS 84
st_transform(4326)
#read in FIM pond outlines
ponddat <- st_read('shapefiles/Robinson_Preserve.shp', quiet = T) %>%
mutate(Pond = str_sub(FolderPath, 24, 29)) %>%
mutate(Type = case_when(Pond %in% c("Pond_6", "Pond_7") ~ "Natural",
TRUE ~ "Restored")) %>%
#group by ponds and make them into polygon outlines
group_by(Pond, Type) %>%
summarise() %>%
st_cast("POLYGON") %>%
#for the outer polygon
st_convex_hull()
# ponddat
# the FIM pond outlines are WGS 84 and are points
#pond outlines, as points, are also readable as individual layers from
#test <- st_read("Robinson_Preserve_2019.final.kml")
#POTENTIAL locations of acoustic receivers
receiverdat <- read.csv("shapefiles/AcousticReceiver_loc_deployed.csv", header = T, stringsAsFactors = F)
receiver.shp <- receiverdat %>%
#specify lat/long and the WGS coord system as 4326
st_as_sf(coords = c('Longitude_dd', 'Latitude_dd'), crs = 4326)
# receiver.shp
#appprocimate location of Rob Preserve entry/exit points
openingdat <- read.csv("shapefiles/RobPres_IngressEgress_loc.csv", header = T, stringsAsFactors = F)
opening.shp <- openingdat %>%
#specify lat/long and the WGS coord system as 4326
st_as_sf(coords = c('LONG_DD', 'LAT_DD'), crs = 4326)
# opening.shp
#### Interactive Mapview Map ####
mapviewOptions(basemaps = c("Esri.WorldImagery", "OpenStreetMap"),
legend.pos = "topright")
mapview(preservedat, col.regions = "lightgreen", alpha.regions = 0.2, layer.name = "Robinson Preserve") +
mapview(ponddat, col.regions = "lightblue", layer.name = "Ponds") +
mapview(opening.shp, zcol = "Type", col.regions = c("Red", "Black"),
alpha.regions = 10, cex = 5, layer.name = "Exit/Entry Points")
?timevis
?timevis::timevis
?timevis::addItem
timeItems <- data.frame(id,content,start)
