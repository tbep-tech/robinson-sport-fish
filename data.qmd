---
title: "Interactive Data Map"
sidebar: false
---

Receiver array data were last downloaded May 2024. Our receivers have heard from 60 of the 80 tagged fish, and most recently heard from 23 tagged individuals. 46 fish have been detected by receivers placed outside of the preserve. 16 fish were last detected by receivers outside of the preserve. Click on a specific receiver in the map below to see the species the receiver has detected. Click each waterbody to show where tagged fish were initially caught and released.

```{r}
#| echo: false
#| warning: false
#| error: false
#| message: false

#### Load all necessary R packages ####
library(tidyverse)
library(sf)
library(mapview)
library(leafpop)
library(odbc)
library(DBI)
library(dbplyr)
library(ggimage)

#### Set option to use s2 for Simple Features ####
sf_use_s2(T)

#### Prep spatial data layers ####

# read in Tampa Bay Shoreline shapefile
TBshore <- st_read('shapefiles/Tampa_Bay_Shoreline.shp', quiet = T) %>%
  st_transform(4326) # this is to set the proper CRS from NAD83 to WGS 84

# read in Robinson Preserve outline polygon from Manatee County
preservedat <- st_read('shapefiles/Parks_and_Preserves.shp', quiet = T) %>%
  filter(NAME == 'Robinson Preserve') %>%
  select(NAME, TOTADDRESS, ZIPCODE, PARK_TYPE, ACREAGE, MANAGEMENT, OWNER_NAME, geometry)
preservedat.shp <- preservedat %>%
  st_transform(4326) # this is to set the proper CRS from NAD83 to WGS 84

# read in Robinson Preserve expansion project outline polygon
expansiondat <- st_read('shapefiles/RobPres_Expansion_Poly.shp', quiet = T) %>%
  select(Entity, Layer, DocName, DocType, geometry) %>%
  st_transform(4326) # this is to set the proper CRS from NAD83 to WGS 84

#read in FIM pond outlines
ponddat <- st_read('shapefiles/Robinson_Preserve.shp', quiet = T) %>%
  mutate(Pond = str_replace(str_sub(FolderPath, 24, 29),"_"," "),
         Type = case_when(Pond %in% c("Pond 6", "Pond 7") ~ "Natural",
                          TRUE ~ "Restored")) %>%

  #group by ponds and make them into polygon outlines
  group_by(Pond, Type) %>%
  summarise() %>%
  ungroup() %>%
  st_convex_hull()

#locations of water loggers installed during restoration monitoring (different grant than acoustics)
loggerdat <- read.csv("shapefiles/RobPres_WaterLogger_loc.csv", header = T, stringsAsFactors = F)
logger.shp <- loggerdat %>%
  filter(Logger.. != 31) %>%
  select(Logger.Type, Pond = Location, Notes, LAT_DD, LONG_DD) %>%
  #specify lat/long and the WGS coord system as 4326
  st_as_sf(coords = c('LONG_DD', 'LAT_DD'), crs = 4326)

#Locations of acoustic receivers
receiverdat <- read.csv("shapefiles/AcousticReceiver_loc_deployed.csv", header = T, stringsAsFactors = F)
receiver.shp <- receiverdat %>%
  mutate(Longitude_dd = -1*Longitude_dd) %>%
  #specify lat/long and the WGS coord system as 4326
  st_as_sf(coords = c('Longitude_dd', 'Latitude_dd'), crs = 4326)

#approximate location of Rob Preserve entry/exit points
openingdat <- read.csv("shapefiles/RobPres_IngressEgress_loc.csv", header = T, stringsAsFactors = F)
opening.shp <- openingdat %>%
  #specify lat/long and the WGS coord system as 4326
  st_as_sf(coords = c('LONG_DD', 'LAT_DD'), crs = 4326)

#### Prep data visualizations ####
load("../params.RData") # This loads in the connection parameters to connect to the SQL tagging tables

# Connect to SQL FSAv1
conn <- dbConnect(odbc::odbc(),
                  driver = driver,
                  server = server,
                  database = database,
                  uid = uid,
                  pwd = pwd)

# Pull in the tagging details from SQL, join to bio and species tables to get scientific name of species, filter for acoustic tags
tags <- left_join(tbl(conn, in_schema("dbo","tbl_TagDetails")),
                  tbl(conn, in_schema("dbo","tbl_Ref_TagNo")),
                  by = c("TagNo","TagType","TagCode")) %>%
        left_join(select(tbl(conn, in_schema("dbo","tbl_FieldBiology")),Reference,SpeciesRecID,TSNCode),
                  by = c("Reference","SpeciesRecID")) %>%
        left_join(select(tbl(conn, in_schema("dbo","tbl_Species")),TSN,Scientificname,CommonName),
                  by = c("TSNCode" = "TSN")) %>%
        filter(TagType == "A") %>%
        collect()

# Read in the acoustic tag data obtained from the receivers
acoustic <- read_csv("../AllAcoustic.csv")

# Filter acoustic data for FIM tags, reassign receiver names as needed, 
tagged <- acoustic %>%
  mutate(TagCode = str_extract(Transmitter,'-(.*)-(.*)',group = 2)) %>%
  left_join(tags, by = "TagCode") %>%
  filter(TagCode %in% unique(tags$TagCode)) %>%
  mutate(Receiver_Number = as.numeric(str_sub(Receiver,start = -6L)),
         date_time = as_date(`Date and Time (UTC)`),
         station = case_when(Receiver_Number == '138847'~"Mead Point 4",
                             Receiver_Number == '138109'~"Palma Sola 2",
                             Receiver_Number == '138101'~"Palma Sola 1",
                             .default = `Station Name`),
         location = ifelse(station %in% c("Mead Point 2", "Mead Point 4", "Perico Bayou","Palma Sola 1", "Palma Sola 2"), "Outside","Inside")) %>%
  arrange(CommonName) %>%
  mutate(TagCode = factor(TagCode, levels = unique(TagCode)))

# Assign file names for tagged species to include in pop-out charts (note that these files are stored outside of the GitHub repository)
fish_images <- data.frame(species = c("Black Drum","Common Snook",'Goliath Grouper',"Red Drum",'Sheepshead',"Tarpon"),img = c("../FishImages/Black Drum.png","../FishImages/Snook.png", "../FishImages/Goliath.png","../FishImages/Red Drum.png","../FishImages/Sheepshead.png","../FishImages/Tarpon.png"))

# Produce charts that show the number of detections for each species by each receiver; add images using the geom_image function from ggimage; note that scaling the images and charts took a bit of trial and error, which is why there are some hard-coded numbers for the y values and sizes
receivers_dat <- full_join(receiver.shp,tagged, by = c("Receiver_Number")) %>%
  group_by(Receiver_Number) %>%
  nest() %>%
  mutate(data = map(data, function(x) {
           x %>%
           group_by(CommonName) %>%
           summarize(n_fish = length(unique(TagCode)),
                     n_detect = length(unique(date_time)))
         }),
         plot = map(data, function(dat) if(all(is.na(dat$CommonName))) {
           ggplot() +
             geom_text(aes(0,0,label = "No Fish Detected")) +
             theme_void()
         } else {
           ggplot(dat) +
             geom_image(aes(x = 0, 
                            y = (1:nrow(dat)-1)*5,
                            image = filter(fish_images, species %in% dat$CommonName)$img),
                        size = 0.1, by = 'height') +
             geom_text(aes(x = 0, 
                           y = (1:nrow(dat)-1)*5 - 2,
                           label = CommonName), 
                       size = 4) +
             geom_text(aes(x = 0, 
                           y = (1:nrow(dat)-1)*5 - 3,
                           label = paste0(n_detect, " daily detections from ",n_fish, " fish")),
                       size = 4) +
             scale_y_continuous(expand = expansion(add = 3)) +
             scale_x_continuous(limits = c(-1,1)) +
             scale_size_identity() +
             theme_void()
         }))

# Assign the list of plots to be used in the mapview call
receiver_plots <- receivers_dat$plot

# Produce charts that show the number of fish tagged for each species in each water body; add images using the geom_image function from ggimage; note that scaling the images and charts took a bit of trial and error, which is why there are some hard-coded numbers for the y values and sizes
pond_tags <- tags %>%
  mutate(Pond = str_match(Notes,'Pond..')[,1]) %>%
  select(Pond,CommonName) %>%
  full_join(ponddat) %>%
  group_by(Pond,CommonName) %>%
  summarize(Count = n()) %>%
  nest() %>%
  mutate(plot = map(data, function(dat) if(all(is.na(dat$CommonName))) {
           ggplot() +
             geom_text(aes(0,0,label = "No Fish Tagged")) +
             theme_void()
         } else {
           ggplot(dat) +
             geom_image(aes(x = 0, 
                            y = (1:nrow(dat)-1)*5, 
                            image = filter(fish_images, species %in% dat$CommonName)$img),
                        size = .1, by = 'height') +
             geom_text(aes(x = 0, 
                           y = (1:nrow(dat)-1)*5 - 2, 
                           label = CommonName), 
                       size = 4) +
             geom_text(aes(x = 0, 
                           y = (1:nrow(dat)-1)*5 - 3,
                           label = paste0(Count, " fish tagged")),
                       size = 4) +
             scale_y_continuous(expand = expansion(add = 3)) +
             scale_x_continuous(limits = c(-1,1)) +
             scale_size_identity() +
             theme_void()
         })) %>%
  filter(!is.na(Pond))

# Assign the list of plots to be used in the mapview call
pond_charts <- pond_tags$plot
```

<div>

```{r}
#| echo: false
#| warning: false
#| error: false
#| message: false
#| column: page
#| height: 900 

#### Produce the mapview dynamic map ####

# Set mapview options to include choice of street map or satellite imagery, add legend, and assign height of map
mapviewOptions(basemaps = c("OpenStreetMap","Esri.WorldImagery"),
               legend.pos = "topright",
               leafletHeight = 1000)
# Produce mapview plot; mapview builds layers a bit like ggplot using the '+' function
# Start with preserve polygon
mapview(preservedat, 
        col.regions = "lightgreen", 
        alpha.regions = 0.2, 
        layer.name = "Robinson Preserve",
        popup = NULL,
        label = FALSE) +
  # Add pond polygons, with a pop-up showing the number of fish tagged in each pond
  mapview(ponddat, 
          col.regions = "lightblue", 
          layer.name = "Waterbodies",
          label = ponddat$Pond,
          popup = popupGraph(pond_charts, height = 400, width = 200)) +
  # Add receiver locations, with a pop-up showing the number of detections of each species at each receiver. Note that active receivers are in yellow, inactive are in gray
  mapview(receiver.shp, 
          zcol = 'Status',
          col.regions = c('yellow','gray'), 
          cex = 8, 
          alpha.regions = 10, 
          layer.name = "Receiver Locations",
          label = receiver.shp$Area_Name,
          popup = popupGraph(receiver_plots, height = 400, width = 200)) +
  # Add Exit/Entry points
  mapview(opening.shp, 
          zcol = "Type", 
          col.regions = c("Red", "Black"),
          alpha.regions = 10, 
          cex = 5, 
          popup = NULL,
          label = FALSE,
          layer.name = "Potential Exit/Entry Points") +
  # Add locations of water/air loggers. Note the commented-out line below; we may eventually want to add in a pop-up graph showing water parameter data, but this is on hold while we sort out the issues with the data
  mapview(logger.shp, 
          col.regions = "blue", 
          cex = 4.5, 
          layer.name = "Water/Air Loggers") 
          # popup = popupGraph(water_log))
```

</div>
